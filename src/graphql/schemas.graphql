enum Role {
  CUSTOMER,
  ADMIN
}

type Query {
  # Users
  user(id: ID!): User
  allUsers: [User!]!

  # Auth
  auth(id: ID!): Auth
  allAuths: [Auth!]!

  # Services
  service(id: ID!): Service
  allServices: [Service!]!

  # Appointments
  appointment(id: ID!): Appointment
  allAppointments: [Appointment!]!
}

type Mutation {
  # Users
  addUser(data: CreateUserDto!): User!
  updateUser(id: ID!,changes: UpdateUserDto!): User!
  deleteUser(id: ID!): ID!

  #Auth
  addAuth(data: CreateAuthDto!): Auth!
  login(email: String!, password: String!): AuthResponse

  # Services
  addService(data: CreateServiceDto!): Service!
  updateService(id: ID!, changes: UpdateServiceDto!): Service!
  deleteService(id: ID!): ID!

  # Appointments
  addAppointment(data: CreateAppointmentDto!): Appointment!
}

type User {
  id: ID!
  name: String!
  phone: String!
}

type Auth {
  id: ID!
  email: String!  
  token: String
  role: Role!
  user: User!
}

type AuthResponse {
  access_token: String!
  auth: Auth
}

type Appointment {
  id: ID!
  time: String!
  date: String!
  user: User!
  services: [Service!]!
}

type Service {
  id: ID!
  name: String!
  price: Float!
}

input CreateUserDto {
  name: String!
  phone: String!
}

input UpdateUserDto {
  name: String
  phone: String
}

input CreateAuthDto {  
  name: String!
  phone: String!
  email: String!
  password: String!
  role: Role!  
}

input CreateServiceDto {
  name: String!
  price: Float!
}

input UpdateServiceDto {
  name: String
  price: Float
}

input CreateAppointmentDto {
  hour: String!
  date: String!
  userId: Int!
  services: [Int!]!
}